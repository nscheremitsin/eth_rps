=========
Обоснование использования commit-reveal
=========

Если выбор игрока сохранить в контракте, то это информация попадет в блокчейн и станет доступна всем пользователям.
Следовательно, оппонент сможет дождаться выбора противника и на основе этой информации сделать свой выбор.
Чтобы это не происходило, игроки локально генерируют большое число, после чего конкатенируют свой выбор с большим числом и вычисляют хеш этой строки.
Игрокам необходимо сохранить локально свой выбор и сгенерированное число, а хеш передать контракту.
Контракт должен проверить, что игрок не сможет записать хеш более одного раза.
Когда оба хеша записаны, игроки публикуют свои выборы, передавая контракту выбор и большое число.
Контракт вычисляет хеш выбора и большого числа и сравнивает его с записанным ранее хешом (проверяет, что ответ не подделан).
После публикации ответов подводятся итоги.


=========
О проекте
=========

Для локальной генерации большого числа и вычисления хеша написана функция в файле generator.py.
Контракт реализован с поддержкой неограниченного числа параллельно происходящих игр.
Один адрес в определенный момент времени может участвовать только в одной игре.
В проекте используются modifier, как того требовало задание, правда, не для ролевой системы, тк не совсем ясно, что имелось в виду под ролевой системой.


=========
Порядок вызова функций для игры
=========

address1 - start
address2 - join
address1 - commit
address2 - commit
address1 - reveal
address2 - reveal
address1 - result
address2 - result

Повторяющиеся вызовы (commit, reveal, result) могут быть переставлены местами (т.е ни что не мешает, например, address2 сделать коммит первым).

Для отмены игры до ее начала (т.е после address1 - start, но до address2 - join): 
address1 - cancel
Для выхода из игры в любой момент, после ее начала (после address2 - join):
addressX - exit